package it.polimi.ingsw.controller;

import it.polimi.ingsw.common.dto.ModelDTO;
import it.polimi.ingsw.common.dto.GameStateDTOFactory;
import it.polimi.ingsw.common.model.events.game.ErrorEvent;
import it.polimi.ingsw.model.ModelFacade;
import it.polimi.ingsw.model.ModelFacadeAdvancedMode;
import it.polimi.ingsw.model.ModelFacadeLearnerMode;
import it.polimi.ingsw.common.model.events.EventContext;
import it.polimi.ingsw.common.model.events.Event;
import it.polimi.ingsw.common.model.enums.AlienType;
import it.polimi.ingsw.common.model.enums.ColorType;
import it.polimi.ingsw.model.player.PlayerData;

import java.util.List;
import java.util.Map;
import java.util.function.Consumer;

/**
 * The GameController class serves as the main controller for the game,
 * coordinating interactions between the view and model layers.
 * It creates a game instance via {@link ModelFacade} and provides
 * synchronized methods for all game operations.
 *
 * <p>This controller implements the MVC pattern by:
 * <ul>
 *   <li>Delegating business logic to the model layer</li>
 *   <li>Handling exceptions and converting them to events</li>
 *   <li>Managing event context for each operation</li>
 *   <li>Providing thread-safe access to game operations</li>
 * </ul>
 *
 * <p>The controller supports two game modes:
 * <ul>
 *   <li>Learner Mode - Simplified gameplay for new players</li>
 *   <li>Advanced Mode - Full gameplay with all features</li>
 * </ul>
 */
public class GameController {

    /**
     * The model facade that exposes methods for interacting with the game model.
     * This facade abstracts the complexity of the underlying model and provides
     * a clean interface for game operations.
     */
    private final ModelFacade model;

    /**
     * Constructs a new GameController with the specified players and game mode.
     *
     * @param usernames a list of player usernames participating in the game.
     *                  Must not be null or empty.
     * @param learnerMode true to create a learner mode game (simplified rules),
     *                    false to create an advanced mode game (full rules)
     * @throws IllegalArgumentException if usernames is null or empty
     */
    public GameController(List<String> usernames, boolean learnerMode) {
        model = learnerMode ? new ModelFacadeLearnerMode(usernames) : new ModelFacadeAdvancedMode(usernames);
    }

    /**
     * Starts the game match. This method initializes the game state and
     * prepares it for player actions.
     *
     * @throws RuntimeException if the match cannot be started due to invalid state
     */
    public synchronized void startMatch() {
        model.startMatch();
    }

    /**
     * Attempts to pick up a component from the game board.
     *
     * @param username the username of the player performing the action
     * @param componentId the unique identifier of the component to pick up
     * @return a list of events generated by this action, including any error events
     * @throws IllegalArgumentException if username is null or componentId is invalid
     */
    public synchronized List<Event> pickComponent(String username, int componentId) {
        EventContext.clear();

        try {
            model.pickComponent(username, componentId);
        } catch (RuntimeException e) {
            EventContext.emit(new ErrorEvent(e.getMessage()));
        }

        return EventContext.getAndClear();
    }

    /**
     * Attempts to release a previously picked component.
     *
     * @param username the username of the player performing the action
     * @param componentId the unique identifier of the component to release
     * @return a list of events generated by this action, including any error events
     * @throws IllegalArgumentException if username is null or componentId is invalid
     */
    public synchronized List<Event> releaseComponent(String username, int componentId) {
        EventContext.clear();

        try {
            model.releaseComponent(username, componentId);
        } catch (RuntimeException e) {
            EventContext.emit(new ErrorEvent(e.getMessage()));
        }

        return EventContext.getAndClear();
    }

    /**
     * Reserve a component for future game scenario.
     *
     * @param username the username of the player performing the action
     * @param componentId the unique identifier of the component to reserve
     * @return a list of events generated by this action, including any error events
     * @throws IllegalArgumentException if username is null or componentId is invalid
     */
    public synchronized List<Event> reserveComponent(String username, int componentId) {
        EventContext.clear();

        try {
            model.reserveComponent(username, componentId);
        } catch (RuntimeException e) {
            EventContext.emit(new ErrorEvent(e.getMessage()));
        }

        return EventContext.getAndClear();
    }

    /**
     * Insert a component into the player's ship at the specified position.
     *
     * @param username the username of the player performing the action
     * @param componentId the unique identifier of the component to insert
     * @param row the row position where to insert the component (0-based)
     * @param col the column position where to insert the component (0-based)
     * @param rotations the number of 90-degree clockwise rotations to apply (0-3)
     * @param weld true to permanently weld the component, false for temporary placement
     * @return a list of events generated by this action, including any error events
     * @throws IllegalArgumentException if parameters are invalid
     */
    public synchronized List<Event> insertComponent(String username, int componentId, int row, int col, int rotations, boolean weld) {
        EventContext.clear();

        try {
            model.insertComponent(username, componentId, row, col, rotations, weld);
        } catch (RuntimeException e) {
            EventContext.emit(new ErrorEvent(e.getMessage()));
        }

        return EventContext.getAndClear();
    }

    /**
     * Move a component to a new position on the player's ship.
     *
     * @param username the username of the player performing the action
     * @param componentId the unique identifier of the component to move
     * @param row the new row position (0-based)
     * @param col the new column position (0-based)
     * @param rotations the number of 90-degree clockwise rotations to apply (0-3)
     * @return a list of events generated by this action, including any error events
     * @throws IllegalArgumentException if parameters are invalid
     */
    public synchronized List<Event> moveComponent(String username, int componentId, int row, int col, int rotations) {
        EventContext.clear();

        try {
            model.moveComponent(username, componentId, row, col, rotations);
        } catch (RuntimeException e) {
            EventContext.emit(new ErrorEvent(e.getMessage()));
        }

        return EventContext.getAndClear();
    }

    /**
     * Rotate a component by the specified number of 90-degree increments.
     *
     * @param username the username of the player performing the action
     * @param componentId the unique identifier of the component to rotate
     * @param num the number of 90-degree clockwise rotations to apply
     * @return a list of events generated by this action, including any error events
     * @throws IllegalArgumentException if parameters are invalid
     */
    public synchronized List<Event> rotateComponent(String username, int componentId, int num) {
        EventContext.clear();

        try {
            model.rotateComponent(username, componentId, num);
        } catch (RuntimeException e) {
            EventContext.emit(new ErrorEvent(e.getMessage()));
        }
        return EventContext.getAndClear();
    }

    /**
     * Look at a specific card pile/deck.
     *
     * @param username the username of the player performing the action
     * @param deckIndex the index of the deck to examine (0-based)
     * @return a list of events generated by this action, including any error events
     * @throws IllegalArgumentException if parameters are invalid
     */
    public synchronized List<Event> lookCardPile(String username, int deckIndex) {
        EventContext.clear();

        try {
            model.lookCardPile(username, deckIndex);
        } catch (RuntimeException e) {
            EventContext.emit(new ErrorEvent(e.getMessage()));
        }
        return EventContext.getAndClear();
    }

    /**
     * Release the currently examined card pile.
     *
     * @param username the username of the player performing the action
     * @return a list of events generated by this action, including any error events
     * @throws IllegalArgumentException if username is null
     */
    public synchronized List<Event> releaseCardPile(String username) {
        EventContext.clear();

        try {
            model.releaseCardPile(username);
        } catch (RuntimeException e) {
            EventContext.emit(new ErrorEvent(e.getMessage()));
        }

        return EventContext.getAndClear();
    }

    /**
     * Move the hourglass, triggering time-based game mechanics.
     *
     * @param username the username of the player performing the action
     * @param callback a callback function to handle the events generated by the hourglass movement
     * @return a list of events generated by this action, including any error events
     * @throws IllegalArgumentException if parameters are invalid
     */
    public synchronized List<Event> moveHourglass(String username, Consumer<List<Event>> callback) {
        EventContext.clear();

        try {
            model.moveHourglass(username, callback);
        } catch (RuntimeException e) {
            EventContext.emit(new ErrorEvent(e.getMessage()));
        }

        return EventContext.getAndClear();
    }

    /**
     * Sets the player's ready status for the current phase or round.
     *
     * @param username the username of the player setting their ready status
     * @return a list of events generated by this action, including any error events
     * @throws IllegalArgumentException if username is null
     */
    public synchronized List<Event> setReady(String username) {
        EventContext.clear();

        try {
            model.setReady(username);
        } catch (RuntimeException e) {
            EventContext.emit(new ErrorEvent(e.getMessage()));
        }

        return EventContext.getAndClear();
    }

    /**
     * Performs a ship integrity check, potentially removing damaged components.
     *
     * @param username the username of the player performing the check
     * @param toRemove a list of component IDs to remove during the check
     * @return a list of events generated by this action, including any error events
     * @throws IllegalArgumentException if parameters are invalid
     */
    public synchronized List<Event> checkShip(String username, List<Integer> toRemove) {
        EventContext.clear();

        try {
            model.checkShip(username, toRemove);
        } catch (RuntimeException e) {
            EventContext.emit(new ErrorEvent(e.getMessage()));
        }

        return EventContext.getAndClear();
    }

    /**
     * Attempts to choose aliens for specific components or positions.
     *
     * @param username the username of the player making the choice
     * @param aliensIds a map associating component/position IDs with alien types
     * @return a list of events generated by this action, including any error events
     * @throws IllegalArgumentException if parameters are invalid
     */
    public synchronized List<Event> chooseAlien(String username, Map<Integer, AlienType> aliensIds) {
        EventContext.clear();

        try {
            model.chooseAlien(username, aliensIds);
        } catch (RuntimeException e) {
            EventContext.emit(new ErrorEvent(e.getMessage()));
        }

        return EventContext.getAndClear();
    }

    /**
     * Attempts to choose a specific ship part from available options.
     *
     * @param username the username of the player making the choice
     * @param partIndex the index of the ship part to choose (0-based)
     * @return a list of events generated by this action, including any error events
     * @throws IllegalArgumentException if parameters are invalid
     */
    public synchronized List<Event> chooseShipPart(String username, int partIndex) {
        EventContext.clear();

        try {
            model.chooseShipPart(username, partIndex);
        } catch (RuntimeException e) {
            EventContext.emit(new ErrorEvent(e.getMessage()));
        }

        return EventContext.getAndClear();
    }

    /**
     * Draw a card from the deck.
     *
     * @param username the username of the player drawing the card
     * @return a list of events generated by this action, including any error events
     * @throws IllegalArgumentException if username is null
     */
    public synchronized List<Event> drawCard(String username) {
        EventContext.clear();

        try {
            model.drawCard(username);
        } catch (RuntimeException e) {
            EventContext.emit(new ErrorEvent(e.getMessage()));
        }

        return EventContext.getAndClear();
    }

    /**
     * Activate cannons using the specified batteries and cannon components.
     *
     * @param username the username of the player activating cannons
     * @param batteriesIds list of battery component IDs to use for power
     * @param cannonComponentsIds list of cannon component IDs to activate
     * @return a list of events generated by this action, including any error events
     * @throws IllegalArgumentException if parameters are invalid
     */
    public synchronized List<Event> activateCannons(String username, List<Integer> batteriesIds, List<Integer> cannonComponentsIds) {
        EventContext.clear();

        try {
            model.activateCannons(username, batteriesIds, cannonComponentsIds);
        } catch (RuntimeException e) {
            EventContext.emit(new ErrorEvent(e.getMessage()));
        }

        return EventContext.getAndClear();
    }

    /**
     * Activate engines using the specified batteries and engine components.
     *
     * @param username the username of the player activating engines
     * @param batteriesIds list of battery component IDs to use for power
     * @param engineComponentsIds list of engine component IDs to activate
     * @return a list of events generated by this action, including any error events
     * @throws IllegalArgumentException if parameters are invalid
     */
    public synchronized List<Event> activateEngines(String username, List<Integer> batteriesIds, List<Integer> engineComponentsIds) {
        EventContext.clear();

        try {
            model.activateEngines(username, batteriesIds, engineComponentsIds);
        } catch (RuntimeException e) {
            EventContext.emit(new ErrorEvent(e.getMessage()));
        }

        return EventContext.getAndClear();
    }

    /**
     * Activate the shield using the specified battery.
     *
     * @param username the username of the player activating the shield
     * @param batteryId the ID of the battery component to use for power
     * @return a list of events generated by this action, including any error events
     * @throws IllegalArgumentException if parameters are invalid
     */
    public synchronized List<Event> activateShield(String username, Integer batteryId) {
        EventContext.clear();

        try {
            model.activateShield(username, batteryId);
        } catch (RuntimeException e) {
            EventContext.emit(new ErrorEvent(e.getMessage()));
        }

        return EventContext.getAndClear();
    }

    /**
     * Update goods in cargo holds and batteries.
     *
     * @param username the username of the player updating goods
     * @param cargoHoldsIds map of cargo hold IDs to lists of color types for goods
     * @param batteriesIds list of battery IDs to update
     * @return a list of events generated by this action, including any error events
     * @throws IllegalArgumentException if parameters are invalid
     */
    public synchronized List<Event> updateGoods(String username, Map<Integer, List<ColorType>> cargoHoldsIds, List<Integer> batteriesIds) {
        EventContext.clear();

        try {
            model.updateGoods(username, cargoHoldsIds, batteriesIds);
        } catch (RuntimeException e) {
            EventContext.emit(new ErrorEvent(e.getMessage()));
        }

        return EventContext.getAndClear();
    }

    /**
     * Remove crew members from the specified cabins.
     *
     * @param username the username of the player removing crew
     * @param cabinsIds list of cabin component IDs from which to remove crew
     * @return a list of events generated by this action, including any error events
     * @throws IllegalArgumentException if parameters are invalid
     */
    public synchronized List<Event> removeCrew(String username, List<Integer> cabinsIds) {
        EventContext.clear();

        try {
            model.removeCrew(username, cabinsIds);
        } catch (RuntimeException e) {
            EventContext.emit(new ErrorEvent(e.getMessage()));
        }

        return EventContext.getAndClear();
    }

    /**
     * Roll dice for the player's turn.
     *
     * @param username the username of the player rolling dice
     * @return a list of events generated by this action, including any error events
     * @throws IllegalArgumentException if username is null
     */
    public synchronized List<Event> rollDices(String username) {
        EventContext.clear();

        try {
            model.rollDices(username);
        } catch (RuntimeException e) {
            EventContext.emit(new ErrorEvent(e.getMessage()));
        }

        return EventContext.getAndClear();
    }

    /**
     * Provides a boolean response to a game query or prompt.
     *
     * @param username the username of the player providing the response
     * @param value the boolean value to submit
     * @return a list of events generated by this action, including any error events
     * @throws IllegalArgumentException if username is null
     */
    public synchronized List<Event> getBoolean(String username, boolean value) {
        EventContext.clear();

        try {
            model.getBoolean(username, value);
        } catch (RuntimeException e) {
            EventContext.emit(new ErrorEvent(e.getMessage()));
        }

        return EventContext.getAndClear();
    }

    /**
     * Provides an integer index response to a game query or prompt.
     *
     * @param username the username of the player providing the response
     * @param value the integer index value to submit
     * @return a list of events generated by this action, including any error events
     * @throws IllegalArgumentException if parameters are invalid
     */
    public synchronized List<Event> getIndex(String username, Integer value) {
        EventContext.clear();

        try {
            model.getIndex(username, value);
        } catch (RuntimeException e) {
            EventContext.emit(new ErrorEvent(e.getMessage()));
        }

        return EventContext.getAndClear();
    }

    /**
     * End the current flight phase for the player.
     *
     * @param username the username of the player ending their flight
     * @return a list of events generated by this action, including any error events
     * @throws IllegalArgumentException if username is null
     */
    public synchronized List<Event> endFlight(String username) {
        EventContext.clear();

        try {
            model.endFlight(username);
        } catch (RuntimeException e) {
            EventContext.emit(new ErrorEvent(e.getMessage()));
        }

        return EventContext.getAndClear();
    }

    /**
     * Handles a player leaving the game. This method does not return events
     * as it's typically called during disconnection scenarios.
     *
     * @param username the username of the player leaving the game
     * @throws IllegalArgumentException if username is null
     */
    public synchronized void leaveGame(String username) {
        try {
            model.leaveGame(username);
        } catch (RuntimeException e) {
            EventContext.emit(new ErrorEvent(e.getMessage()));
        }
    }

    /**
     * Handles a player rejoining the game after a disconnection.
     * This method does not return events as reconnection is handled differently.
     *
     * @param username the username of the player rejoining the game
     * @throws IllegalArgumentException if username is null
     */
    public synchronized void rejoinGame(String username) {
        try {
            model.rejoinGame(username);
        } catch (RuntimeException e) {
            EventContext.emit(new ErrorEvent(e.getMessage()));
        }
    }

    /**
     * Converts the current game state to a Data Transfer Object (DTO)
     * for serialization and transmission to clients.
     *
     * @return a ModelDTO representing the current game state
     */
    public synchronized ModelDTO toDTO() {
        return GameStateDTOFactory.createFromModel(model);
    }

    // TEST only
    public ModelFacade getModel() {
        return model;
    }

    public List<Event> startTest(int testNumber) {
        EventContext.clear();
        List<String> usernames = model.getBoard().getStartingDeck().stream().map(PlayerData::getUsername).toList();
        switch (testNumber) {
            case 1 -> {
                // Test scenario 1: Complex multi-player setup
                // Player 1 ship building sequence
                model.pickComponent(usernames.getFirst(), 102);
                model.insertComponent(usernames.getFirst(), 102, 0, 2, 0, true);
                // ... (additional setup code continues)

                model.pickComponent(usernames.getFirst(), 16);
                model.rotateComponent(usernames.getFirst(), 16, 3);
                model.insertComponent(usernames.getFirst(), 16, 0, 4, 0, true);

                model.pickComponent(usernames.getFirst(), 113);
                model.rotateComponent(usernames.getFirst(), 113, 3);
                model.insertComponent(usernames.getFirst(), 113, 1, 1, 0, true);

                model.pickComponent(usernames.getFirst(), 60);
                model.rotateComponent(usernames.getFirst(), 60, 3);
                model.insertComponent(usernames.getFirst(), 60, 1, 2, 0, true);

                model.pickComponent(usernames.getFirst(), 131);
                model.insertComponent(usernames.getFirst(), 131, 1, 3, 0, true);

                model.pickComponent(usernames.getFirst(), 116);
                model.rotateComponent(usernames.getFirst(), 116, 1);
                model.insertComponent(usernames.getFirst(), 116, 1, 4, 0, true);

                model.pickComponent(usernames.getFirst(), 134);
                model.rotateComponent(usernames.getFirst(), 134, 3);
                model.insertComponent(usernames.getFirst(), 134, 2, 0, 0, true);

                model.pickComponent(usernames.getFirst(), 55);
                model.insertComponent(usernames.getFirst(), 55, 2, 1, 0, true);

                model.pickComponent(usernames.getFirst(), 38);
                model.rotateComponent(usernames.getFirst(), 38, 1);
                model.insertComponent(usernames.getFirst(), 38, 2, 2, 0, true);

                model.pickComponent(usernames.getFirst(), 63);
                model.insertComponent(usernames.getFirst(), 63, 2, 4, 0, true);

                model.pickComponent(usernames.getFirst(), 24);
                model.insertComponent(usernames.getFirst(), 24, 2, 5, 0, true);

                model.pickComponent(usernames.getFirst(), 25);
                model.insertComponent(usernames.getFirst(), 25, 2, 6, 0, true);

                model.pickComponent(usernames.getFirst(), 9);
                model.rotateComponent(usernames.getFirst(), 9, 1);
                model.insertComponent(usernames.getFirst(), 9, 3, 0, 0, true);

                model.pickComponent(usernames.getFirst(), 152);
                model.rotateComponent(usernames.getFirst(), 152, 2);
                model.insertComponent(usernames.getFirst(), 152, 3, 1, 0, true);

                model.pickComponent(usernames.getFirst(), 5);
                model.insertComponent(usernames.getFirst(), 5, 3, 2, 0, true);

                model.pickComponent(usernames.getFirst(), 92);
                model.insertComponent(usernames.getFirst(), 92, 3, 3, 0, true);

                model.pickComponent(usernames.getFirst(), 146);
                model.rotateComponent(usernames.getFirst(), 146, 1);
                model.insertComponent(usernames.getFirst(), 146, 3, 4, 0, true);

                model.pickComponent(usernames.getFirst(), 62);
                model.rotateComponent(usernames.getFirst(), 62, 1);
                model.insertComponent(usernames.getFirst(), 62, 3, 5, 0, true);

                model.pickComponent(usernames.getFirst(), 77);
                model.insertComponent(usernames.getFirst(), 77, 4, 0, 0, true);

                model.pickComponent(usernames.getFirst(), 46);
                model.rotateComponent(usernames.getFirst(), 46, 2);
                model.insertComponent(usernames.getFirst(), 46, 4, 1, 0, true);

                model.pickComponent(usernames.getFirst(), 137);
                model.insertComponent(usernames.getFirst(), 137, 4, 2, 0, true);

                model.pickComponent(usernames.getFirst(), 104);
                model.rotateComponent(usernames.getFirst(), 104, 3);
                model.insertComponent(usernames.getFirst(), 104, 4, 4, 0, true);

                model.pickComponent(usernames.getFirst(), 36);
                model.rotateComponent(usernames.getFirst(), 36, 2);
                model.insertComponent(usernames.getFirst(), 36, 4, 5, 0, true);

                model.pickComponent(usernames.getFirst(), 100);
                model.rotateComponent(usernames.getFirst(), 100, 1);
                model.insertComponent(usernames.getFirst(), 100, 4, 6, 0, true);

                // Player 2 ship building sequence
                model.pickComponent(usernames.get(1), 127);
                model.rotateComponent(usernames.get(1), 127, 1);
                model.insertComponent(usernames.get(1), 127, 0, 2, 0, true);

                model.pickComponent(usernames.get(1), 108);
                model.insertComponent(usernames.get(1), 108, 0, 4, 0, true);

                model.pickComponent(usernames.get(1), 143);
                model.rotateComponent(usernames.get(1), 143, 3);
                model.insertComponent(usernames.get(1), 143, 1, 1, 0, true);

                model.pickComponent(usernames.get(1), 64);
                model.rotateComponent(usernames.get(1), 64, 1);
                model.insertComponent(usernames.get(1), 64, 1, 2, 0, true);

                model.pickComponent(usernames.get(1), 3);
                model.rotateComponent(usernames.get(1), 3, 2);
                model.insertComponent(usernames.get(1), 3, 1, 4, 0, true);

                model.pickComponent(usernames.get(1), 28);
                model.rotateComponent(usernames.get(1), 28, 3);
                model.insertComponent(usernames.get(1), 28, 1, 5, 0, true);

                model.pickComponent(usernames.get(1), 149);
                model.rotateComponent(usernames.get(1), 149, 3);
                model.insertComponent(usernames.get(1), 149, 2, 0, 0, true);

                model.pickComponent(usernames.get(1), 51);
                model.rotateComponent(usernames.get(1), 51, 1);
                model.insertComponent(usernames.get(1), 51, 2, 1, 0, true);

                model.pickComponent(usernames.get(1), 56);
                model.insertComponent(usernames.get(1), 56, 2, 2, 0, true);

                model.pickComponent(usernames.get(1), 58);
                model.rotateComponent(usernames.get(1), 58, 2);
                model.insertComponent(usernames.get(1), 58, 2, 4, 0, true);

                model.pickComponent(usernames.get(1), 150);
                model.rotateComponent(usernames.get(1), 150, 1);
                model.insertComponent(usernames.get(1), 150, 2, 5, 0, true);

                model.pickComponent(usernames.get(1), 103);
                model.insertComponent(usernames.get(1), 103, 2, 6, 0, true);

                model.pickComponent(usernames.get(1), 14);
                model.insertComponent(usernames.get(1), 14, 3, 0, 0, true);

                model.pickComponent(usernames.get(1), 79);
                model.insertComponent(usernames.get(1), 79, 3, 1, 0, true);

                model.pickComponent(usernames.get(1), 85);
                model.insertComponent(usernames.get(1), 85, 3, 3, 0, true);

                model.pickComponent(usernames.get(1), 43);
                model.rotateComponent(usernames.get(1), 43, 1);
                model.insertComponent(usernames.get(1), 43, 3, 4, 0, true);

                model.pickComponent(usernames.get(1), 53);
                model.insertComponent(usernames.get(1), 53, 3, 5, 0, true);

                model.pickComponent(usernames.get(1), 97);
                model.insertComponent(usernames.get(1), 97, 3, 6, 0, true);

                model.pickComponent(usernames.get(1), 45);
                model.rotateComponent(usernames.get(1), 45, 1);
                model.insertComponent(usernames.get(1), 45, 4, 4, 0, true);

                model.pickComponent(usernames.get(1), 67);
                model.insertComponent(usernames.get(1), 67, 4, 5, 0, true);

                model.pickComponent(usernames.get(1), 90);
                model.reserveComponent(usernames.get(1), 90);

                // Player 3 ship building sequence
                model.pickComponent(usernames.get(2), 118);
                model.insertComponent(usernames.get(2), 118, 0, 2, 0, true);

                model.pickComponent(usernames.get(2), 126);
                model.insertComponent(usernames.get(2), 126, 0, 4, 0, true);

                model.pickComponent(usernames.get(2), 136);
                model.rotateComponent(usernames.get(2), 136, 1);
                model.insertComponent(usernames.get(2), 136, 1, 1, 0, true);

                model.pickComponent(usernames.get(2), 44);
                model.rotateComponent(usernames.get(2), 44, 3);
                model.insertComponent(usernames.get(2), 44, 1, 2, 0, true);

                model.pickComponent(usernames.get(2), 61);
                model.insertComponent(usernames.get(2), 61, 1, 3, 0, true);

                model.pickComponent(usernames.get(2), 1);
                model.rotateComponent(usernames.get(2), 1, 3);
                model.insertComponent(usernames.get(2), 1, 1, 4, 0, true);

                model.pickComponent(usernames.get(2), 133);
                model.insertComponent(usernames.get(2), 133, 1, 5, 0, true);

                model.pickComponent(usernames.get(2), 114);
                model.insertComponent(usernames.get(2), 114, 2, 0, 0, true);

                model.pickComponent(usernames.get(2), 37);
                model.rotateComponent(usernames.get(2), 37, 1);
                model.insertComponent(usernames.get(2), 37, 2, 1, 0, true);

                model.pickComponent(usernames.get(2), 148);
                model.rotateComponent(usernames.get(2), 148, 2);
                model.insertComponent(usernames.get(2), 148, 2, 2, 0, true);

                model.pickComponent(usernames.get(2), 142);
                model.rotateComponent(usernames.get(2), 142, 2);
                model.insertComponent(usernames.get(2), 142, 2, 4, 0, true);

                model.pickComponent(usernames.get(2), 39);
                model.rotateComponent(usernames.get(2), 39, 3);
                model.insertComponent(usernames.get(2), 39, 2, 5, 0, true);

                model.pickComponent(usernames.get(2), 12);
                model.insertComponent(usernames.get(2), 12, 3, 0, 0, true);

                model.pickComponent(usernames.get(2), 41);
                model.insertComponent(usernames.get(2), 41, 3, 1, 0, true);

                model.pickComponent(usernames.get(2), 18);
                model.rotateComponent(usernames.get(2), 18, 2);
                model.insertComponent(usernames.get(2), 18, 3, 2, 0, true);

                model.pickComponent(usernames.get(2), 95);
                model.insertComponent(usernames.get(2), 95, 3, 3, 0, true);

                model.pickComponent(usernames.get(2), 151);
                model.rotateComponent(usernames.get(2), 151, 3);
                model.insertComponent(usernames.get(2), 151, 3, 4, 0, true);

                model.pickComponent(usernames.get(2), 30);
                model.insertComponent(usernames.get(2), 30, 3, 5, 0, true);

                model.pickComponent(usernames.get(2), 75);
                model.insertComponent(usernames.get(2), 75, 4, 0, 0, true);

                model.pickComponent(usernames.get(2), 94);
                model.insertComponent(usernames.get(2), 94, 4, 1, 0, true);

                model.pickComponent(usernames.get(2), 81);
                model.insertComponent(usernames.get(2), 81, 4, 2, 0, true);

                model.pickComponent(usernames.get(2), 10);
                model.rotateComponent(usernames.get(2), 10, 1);
                model.insertComponent(usernames.get(2), 10, 4, 4, 0, true);

                model.pickComponent(usernames.get(2), 96);
                model.insertComponent(usernames.get(2), 96, 4, 5, 0, true);

                model.pickComponent(usernames.get(2), 87);
                model.insertComponent(usernames.get(2), 87, 4, 6, 0, true);
            }
            case 2 -> {
                model.pickComponent(usernames.getFirst(), 130);
                model.rotateComponent(usernames.getFirst(), 130, 3);
                model.insertComponent(usernames.getFirst(), 130, 0, 3, 0, true);

                model.pickComponent(usernames.getFirst(), 68);
                model.rotateComponent(usernames.getFirst(), 68, 2);
                model.insertComponent(usernames.getFirst(), 68, 1, 4, 0, true);

                model.pickComponent(usernames.getFirst(), 14);
                model.rotateComponent(usernames.getFirst(), 14, 1);
                model.insertComponent(usernames.getFirst(), 14, 1, 2, 0, true);

                model.pickComponent(usernames.getFirst(), 58);
                model.rotateComponent(usernames.getFirst(), 58, 1);
                model.insertComponent(usernames.getFirst(), 58, 1, 3, 0, true);

                model.pickComponent(usernames.getFirst(), 25);
                model.rotateComponent(usernames.getFirst(), 25, 2);
                model.insertComponent(usernames.getFirst(), 25, 2, 1, 0, true);

                model.pickComponent(usernames.getFirst(), 44);
                model.rotateComponent(usernames.getFirst(), 44, 3);
                model.insertComponent(usernames.getFirst(), 44, 2, 2, 0, true);

                model.pickComponent(usernames.getFirst(), 115);
                model.rotateComponent(usernames.getFirst(), 115, 1);
                model.insertComponent(usernames.getFirst(), 115, 2, 5, 0, true);

                model.pickComponent(usernames.getFirst(), 29);
                model.rotateComponent(usernames.getFirst(), 29, 1);
                model.insertComponent(usernames.getFirst(), 29, 2, 4, 0, true);

                model.pickComponent(usernames.getFirst(), 96);
                model.rotateComponent(usernames.getFirst(), 96, 0);
                model.insertComponent(usernames.getFirst(), 96, 3, 1, 0, true);

                model.pickComponent(usernames.getFirst(), 31);
                model.rotateComponent(usernames.getFirst(), 31, 0);
                model.insertComponent(usernames.getFirst(), 31, 3, 2, 0, true);

                model.pickComponent(usernames.getFirst(), 51);
                model.rotateComponent(usernames.getFirst(), 51, 1);
                model.insertComponent(usernames.getFirst(), 51, 4, 2, 0, true);

                model.pickComponent(usernames.getFirst(), 77);
                model.rotateComponent(usernames.getFirst(), 77, 0);
                model.insertComponent(usernames.getFirst(), 77, 3, 3, 0, true);

                model.pickComponent(usernames.getFirst(), 5);
                model.rotateComponent(usernames.getFirst(), 5, 3);
                model.insertComponent(usernames.getFirst(), 5, 3, 4, 0, true);

                model.pickComponent(usernames.getFirst(), 147);
                model.rotateComponent(usernames.getFirst(), 147, 1);
                model.insertComponent(usernames.getFirst(), 147, 4, 4, 0, true);

                model.pickComponent(usernames.getFirst(), 89);
                model.rotateComponent(usernames.getFirst(), 89, 0);
                model.insertComponent(usernames.getFirst(), 89, 4, 5, 0, true);


                model.pickComponent(usernames.get(1), 118);
                model.rotateComponent(usernames.get(1), 118, 3);
                model.insertComponent(usernames.get(1), 118, 0, 3, 0, true);

                model.pickComponent(usernames.get(1), 13);
                model.rotateComponent(usernames.get(1), 13, 1);
                model.insertComponent(usernames.get(1), 13, 1, 2, 0, true);

                model.pickComponent(usernames.get(1), 150);
                model.rotateComponent(usernames.get(1), 150, 1);
                model.insertComponent(usernames.get(1), 150, 1, 3, 0, true);

                model.pickComponent(usernames.get(1), 116);
                model.rotateComponent(usernames.get(1), 116, 1);
                model.insertComponent(usernames.get(1), 116, 1, 4, 0, true);

                model.pickComponent(usernames.get(1), 125);
                model.rotateComponent(usernames.get(1), 125, 0);
                model.insertComponent(usernames.get(1), 125, 2, 1, 0, true);

                model.pickComponent(usernames.get(1), 149);
                model.rotateComponent(usernames.get(1), 149, 3);
                model.insertComponent(usernames.get(1), 149, 2, 2, 0, true);

                model.pickComponent(usernames.get(1), 63);
                model.rotateComponent(usernames.get(1), 63, 3);
                model.insertComponent(usernames.get(1), 63, 2, 4, 0, true);

                model.pickComponent(usernames.get(1), 62);
                model.rotateComponent(usernames.get(1), 62, 2);
                model.insertComponent(usernames.get(1), 62, 2, 5, 0, true);

                model.pickComponent(usernames.get(1), 30);
                model.rotateComponent(usernames.get(1), 30, 2);
                model.insertComponent(usernames.get(1), 30, 3, 1, 0, true);

                model.pickComponent(usernames.get(1), 56);
                model.rotateComponent(usernames.get(1), 56, 3);
                model.insertComponent(usernames.get(1), 56, 3, 2, 0, true);

                model.pickComponent(usernames.get(1), 18);
                model.rotateComponent(usernames.get(1), 18, 1);
                model.insertComponent(usernames.get(1), 18, 3, 3, 0, true);

                model.pickComponent(usernames.get(1), 60);
                model.rotateComponent(usernames.get(1), 60, 2);
                model.insertComponent(usernames.get(1), 60, 3, 4, 0, true);

                model.pickComponent(usernames.get(1), 124);
                model.rotateComponent(usernames.get(1), 124, 1);
                model.insertComponent(usernames.get(1), 124, 3, 5, 0, true);

                model.pickComponent(usernames.get(1), 84);
                model.rotateComponent(usernames.get(1), 84, 0);
                model.insertComponent(usernames.get(1), 84, 4, 1, 0, true);

                model.pickComponent(usernames.get(1), 99);
                model.rotateComponent(usernames.get(1), 99, 0);
                model.insertComponent(usernames.get(1), 99, 4, 2, 0, true);

                model.pickComponent(usernames.get(1), 94);
                model.rotateComponent(usernames.get(1), 94, 0);
                model.insertComponent(usernames.get(1), 94, 4, 4, 0, true);

                model.pickComponent(usernames.get(1), 16);
                model.rotateComponent(usernames.get(1), 16, 0);
                model.insertComponent(usernames.get(1), 16, 4, 5, 0, true);


                model.pickComponent(usernames.get(2), 103);
                model.rotateComponent(usernames.get(2), 103, 0);
                model.insertComponent(usernames.get(2), 103, 0, 3, 0, true);

                model.pickComponent(usernames.get(2), 152);
                model.rotateComponent(usernames.get(2), 152, 3);
                model.insertComponent(usernames.get(2), 152, 1, 2, 0, true);

                model.pickComponent(usernames.get(2), 4);
                model.rotateComponent(usernames.get(2), 4, 2);
                model.insertComponent(usernames.get(2), 4, 1, 3, 0, true);

                model.pickComponent(usernames.get(2), 129);
                model.rotateComponent(usernames.get(2), 129, 0);
                model.insertComponent(usernames.get(2), 129, 1, 4, 0, true);

                model.pickComponent(usernames.get(2), 12);
                model.rotateComponent(usernames.get(2), 12, 0);
                model.insertComponent(usernames.get(2), 12, 2, 1, 0, true);

                model.pickComponent(usernames.get(2), 65);
                model.rotateComponent(usernames.get(2), 65, 0);
                model.insertComponent(usernames.get(2), 65, 2, 2, 0, true);

                model.pickComponent(usernames.get(2), 24);
                model.rotateComponent(usernames.get(2), 24, 2);
                model.insertComponent(usernames.get(2), 24, 2, 4, 0, true);

                model.pickComponent(usernames.get(2), 153);
                model.rotateComponent(usernames.get(2), 153, 1);
                model.insertComponent(usernames.get(2), 153, 2, 5, 0, true);

                model.pickComponent(usernames.get(2), 1);
                model.rotateComponent(usernames.get(2), 1, 0);
                model.insertComponent(usernames.get(2), 1, 3, 1, 0, true);

                model.pickComponent(usernames.get(2), 55);
                model.rotateComponent(usernames.get(2), 55, 1);
                model.insertComponent(usernames.get(2), 55, 3, 2, 0, true);

                model.pickComponent(usernames.get(2), 146);
                model.rotateComponent(usernames.get(2), 146, 2);
                model.insertComponent(usernames.get(2), 146, 3, 3, 0, true);

                model.pickComponent(usernames.get(2), 6);
                model.rotateComponent(usernames.get(2), 6, 0);
                model.insertComponent(usernames.get(2), 6, 3, 4, 0, true);

                model.pickComponent(usernames.get(2), 47);
                model.rotateComponent(usernames.get(2), 47, 1);
                model.insertComponent(usernames.get(2), 47, 3, 5, 0, true);

                model.pickComponent(usernames.get(2), 66);
                model.rotateComponent(usernames.get(2), 66, 1);
                model.insertComponent(usernames.get(2), 66, 4, 1, 0, true);

                model.pickComponent(usernames.get(2), 95);
                model.rotateComponent(usernames.get(2), 95, 0);
                model.insertComponent(usernames.get(2), 95, 4, 2, 0, true);

                model.pickComponent(usernames.get(2), 61);
                model.rotateComponent(usernames.get(2), 61, 2);
                model.insertComponent(usernames.get(2), 61, 4, 4, 0, true);

                model.pickComponent(usernames.get(2), 97);
                model.rotateComponent(usernames.get(2), 97, 0);
                model.insertComponent(usernames.get(2), 97, 4, 5, 0, true);


                model.pickComponent(usernames.get(3), 102);
                model.rotateComponent(usernames.get(3), 102, 0);
                model.insertComponent(usernames.get(3), 102, 0, 3, 0, true);

                model.pickComponent(usernames.get(3), 132);
                model.rotateComponent(usernames.get(3), 132, 3);
                model.insertComponent(usernames.get(3), 132, 1, 2, 0, true);

                model.pickComponent(usernames.get(3), 38);
                model.rotateComponent(usernames.get(3), 38, 3);
                model.insertComponent(usernames.get(3), 38, 1, 3, 0, true);

                model.pickComponent(usernames.get(3), 109);
                model.rotateComponent(usernames.get(3), 109, 1);
                model.insertComponent(usernames.get(3), 109, 1, 4, 0, true);

                model.pickComponent(usernames.get(3), 151);
                model.rotateComponent(usernames.get(3), 151, 2);
                model.insertComponent(usernames.get(3), 151, 2, 1, 0, true);

                model.pickComponent(usernames.get(3), 15);
                model.rotateComponent(usernames.get(3), 15, 3);
                model.insertComponent(usernames.get(3), 15, 2, 2, 0, true);

                model.pickComponent(usernames.get(3), 148);
                model.rotateComponent(usernames.get(3), 148, 0);
                model.insertComponent(usernames.get(3), 148, 2, 4, 0, true);

                model.pickComponent(usernames.get(3), 17);
                model.rotateComponent(usernames.get(3), 17, 2);
                model.insertComponent(usernames.get(3), 17, 2, 5, 0, true);

                model.pickComponent(usernames.get(3), 144);
                model.rotateComponent(usernames.get(3), 144, 3);
                model.insertComponent(usernames.get(3), 144, 3, 1, 0, true);

                model.pickComponent(usernames.get(3), 67);
                model.rotateComponent(usernames.get(3), 67, 3);
                model.insertComponent(usernames.get(3), 67, 3, 2, 0, true);

                model.pickComponent(usernames.get(3), 92);
                model.rotateComponent(usernames.get(3), 92, 0);
                model.insertComponent(usernames.get(3), 92, 3, 3, 0, true);

                model.pickComponent(usernames.get(3), 136);
                model.rotateComponent(usernames.get(3), 136, 0);
                model.insertComponent(usernames.get(3), 136, 3, 4, 0, true);

                model.pickComponent(usernames.get(3), 41);
                model.rotateComponent(usernames.get(3), 41, 0);
                model.insertComponent(usernames.get(3), 41, 3, 5, 0, true);

                model.pickComponent(usernames.get(3), 37);
                model.rotateComponent(usernames.get(3), 37, 2);
                model.insertComponent(usernames.get(3), 37, 4, 1, 0, true);

                model.pickComponent(usernames.get(3), 82);
                model.rotateComponent(usernames.get(3), 82, 0);
                model.insertComponent(usernames.get(3), 82, 4, 2, 0, true);

                model.pickComponent(usernames.get(3), 3);
                model.rotateComponent(usernames.get(3), 3, 3);
                model.insertComponent(usernames.get(3), 3, 4, 4, 0, true);

                model.pickComponent(usernames.get(3), 19);
                model.rotateComponent(usernames.get(3), 19, 0);
                model.insertComponent(usernames.get(3), 19, 4, 5, 0, true);

            }
            default -> throw new IllegalArgumentException("Unsupported test number: " + testNumber);
        }
        return EventContext.getAndClear();
    }

}